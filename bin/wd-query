#!/usr/bin/env node
const program = require('../lib/program')

program
.option('-s, --subject <subject>', 'set a subject')
.option('-p, --property <property>', 'set a property')
.option('-o, --object <object>', 'set an object')
.option('-r, --raw', 'raw SPARQL results')
.option('-a, --labels', 'requests results labels')
.option('-t, --limit <num>', 'set the request results limit (defaults to 1000)')
.process('query')

const { dim } = require('chalk')
const formatStatementElementValue = require('../lib/format_statement_element_value')
const makeSparqlQuery = require('../lib/make_sparql_query')
const output = require('../lib/output')(program)

if (process.argv.length === 2) return program.help()

const includeLabels = program.labels
var lang = program.lang

if (!(program.subject || program.property || program.object)) {
  console.log("At least one statement element should be set: subject (-s), property (-p), or object (-o)")
  process.exit(1)
}
if (program.subject && program.property && program.object) {
  console.log('At maximum two statement element should be set')
  process.exit(1)
}

var select = ''
var triple = '?subject ?property ?object .'

function setElement (elName) {
  var value = program[elName]
  if (value) {
    value = formatStatementElementValue[elName](value)
    triple = triple.replace(`?${elName}`, value)
  } else {
    select += `?${elName} `
    if (includeLabels) select += `?${elName}Label `
    // If the property isn't set, specify that we want only direct/truthy claims
    // and not every statements and qualifiers
    if (elName === 'property') triple += ' ?prop wikibase:directClaim ?property .'
  }
}

setElement('subject')
setElement('property')
setElement('object')

if (includeLabels) {
  if (lang !== 'en') {
    // include English as a fallback
    lang = `${lang},en`
  }
  triple += `
  SERVICE wikibase:label {
    bd:serviceParam wikibase:language "${lang}" .
  }`
}

const limit = program.limit || 1000

const sparql = `
SELECT ${select}
WHERE { ${triple} }
LIMIT ${limit}`

output(`${dim('Generated SPARQL:')} ${sparql}`, true, true)

makeSparqlQuery(sparql)
.then(output)
