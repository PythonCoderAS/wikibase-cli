#!/usr/bin/env node
const program = require('commander')
const chalk   = require('chalk')
const strings = require('../lib/strings')

program
.arguments(strings.claims.args)
.description(strings.claims.description)
.option('-l, --lang <lang>', "specify the properties labels' language")
.parse(process.argv)

var id = program.args[0]
var prop = program.args[1]
const localLang = require('../lib/local_lang')

Promise = require('bluebird')

const lang = program.lang || localLang || 'en'

if (!(id && lang)) return program.help()

const propsPromise = require('../lib/get_lang_props')(lang)

if (/^[0-9]+$/.test(id)) { id = `Q${id}` }
if (/^[0-9]+$/.test(prop)) { prop = `P${prop}` }

const copy = require('../lib/copy')
const breq = require('bluereq')
const error_ = require('../lib/error')
const exist = require('../lib/exist')

const wdk = require('wikidata-sdk')
require('colors')

const url = wdk.getEntities({
  props: 'claims',
  ids: id
})

const parseRes = function (res, props) {
  const entity = res.body.entities && res.body.entities[id]

  const logProp = function (k, v) {
    const label = props[k]
    console.log(chalk.dim(k), v, label && chalk.dim(label) || '')
  }

  if (exist(entity)) {
    const claims = wdk.simplifyClaims(entity.claims)
    if (exist(prop)) {
      const value = claims[prop]
      if (value != null) {
        logProp(prop, claims[prop])
        copy(claims[prop].toString())
      } else {
        const label = props[prop]
        console.log('no statement found'.yellow, label)
      }
    } else {
      var k, v
      for (k in claims) {
        v = claims[k]
        logProp(k, v)
      }
    }
  } else {
    console.log('error: ', res.body)
  }
}


Promise.all([ breq.get(url), propsPromise ])
.spread(parseRes)
.catch(error_.log)
