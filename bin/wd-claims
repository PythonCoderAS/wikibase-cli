#!/usr/bin/env node
const program = require('../lib/program')

program.process('claims')

const { dim, yellow } = require('chalk')
const parseId = require('../lib/tolerant_id_parser')
const logClaims = require('../lib/log_claims')
var id = parseId(program.args[0])
var prop = parseId(program.args[1])
const { lang, verbose } = program
const output = require('../lib/output')(program)

if (!(id && lang)) return program.help()

// Working around a weird behavior of commander that inverts arguments
// when an option is passed before
if (id && prop && id[0] === 'P' && prop[0] === 'Q') [ id, prop ] = [ prop, id ]

const propsPromise = require('../lib/get_lang_props')(program)

if (/^[0-9]+$/.test(id)) id = `Q${id}`
if (/^[0-9]+$/.test(prop)) prop = `P${prop}`

const lightGet = require('../lib/light_get')
const error_ = require('../lib/error')
const exist = require('../lib/exist')
const wdk = require('../lib/customized_wdk')(program)

const url = wdk.customize('getEntities', {
  props: 'claims',
  ids: id
})

const parseRes = function (res) {
  const [ body, props ] = res
  const entity = body.entities && body.entities[id]

  if (exist(entity)) {
    const claims = wdk.simplifyClaims(entity.claims)
    if (exist(prop)) {
      const value = claims[prop]
      if (value != null) {
        output(claims[prop])
      } else {
        const label = props[prop]
        console.log(yellow('no statement found'), label)
      }
    } else {
      logClaims(program, claims, props)
    }
  } else {
    console.log('error: ', body)
  }
}

Promise.all([ lightGet(url), propsPromise ])
.then(parseRes)
.catch(error_.exit)
