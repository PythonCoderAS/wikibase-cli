#!/usr/bin/env node
const program = require('../lib/program')
const { dim, yellow } = require('chalk')

program.process('claims')

var id = program.args[0]
var prop = program.args[1]
const {Â lang, verbose } = program
const output = require('../lib/output')(program)

if (!(id && lang)) return program.help()

const propsPromise = require('../lib/get_lang_props')(lang)

if (/^[0-9]+$/.test(id)) { id = `Q${id}` }
if (/^[0-9]+$/.test(prop)) { prop = `P${prop}` }

const lightGet = require('../lib/light_get')
const error_ = require('../lib/error')
const exist = require('../lib/exist')
const wdk = require('wikidata-sdk')

const url = wdk.getEntities({
  props: 'claims',
  ids: id
})

const parseRes = function (res) {
  const body = res[0]
  const props = res[1]
  const entity = body.entities && body.entities[id]

  const logProp = function (k, v, optional) {
    const propLabel = dim(verbose ? ` (${props[k]})` : '')
    const value = v.toString().replace(/,/g, ' ')
    output(`${dim(k)}${propLabel} ${value}`, optional)
  }

  if (exist(entity)) {
    const claims = wdk.simplifyClaims(entity.claims)
    if (exist(prop)) {
      const value = claims[prop]
      if (value != null) {
        logProp(prop, claims[prop], true)
        output(claims[prop])
      } else {
        const label = props[prop]
        console.log(yellow('no statement found'), label)
      }
    } else {
      var k, v
      for (k in claims) {
        v = claims[k]
        logProp(k, v, false)
      }
    }
  } else {
    console.log('error: ', body)
  }
}


Promise.all([ lightGet(url), propsPromise ])
.then(parseRes)
.catch(error_.log)
