#!/usr/bin/env node
const program = require('../lib/program')

program
.option('-s, --subject <subject>', 'set a subject')
.option('-p, --property <property>', 'set a property')
.option('-o, --object <object>', 'set an object')
.option('-a, --labels', 'requests results labels')
.option('-c, --count', 'return a count of matching results')
.option('-r, --raw', 'raw SPARQL results')
.option('-d, --dry', 'output the SPARQL without running the query')
// /!\ -o would conflict with --object
.option('--open', 'open the query in the Query Service GUI')
.option('-f, --format <format>', 'output in a different format. Default: json. Alternatives: table')
.option('-n, --limit <num>', 'set the request results limit')
.option('-x, --index <variable>', "return the result as an index, instead of a list, using the passed variable as key (can't be used with the 'raw' option)")
.process('query')

if (!(program.subject || program.property || program.object)) program.helpAndExit(0)

const { grey } = require('chalk')
const formatStatementElementValue = require('../lib/format_statement_element_value')
const sparqlQueryCommand = require('../lib/sparql_query_command')
const output = require('../lib/output')(program)

var { count: countResults, labels: selectLabels, lang } = program
selectLabels = selectLabels && !countResults

if (program.subject && program.property && program.object) {
  console.log('At maximum two statement element should be set')
  process.exit(1)
}

var select = ''
var triple = '?subject ?property ?object .'

function setElement (elName) {
  var value = program[elName]
  if (value) {
    value = formatStatementElementValue[elName](value)
    triple = triple.replace(`?${elName}`, value)
  } else {
    if (countResults) {
      // Get a count by selecting the first missing variable
      if (select === '') select = `(COUNT(?${elName}) AS ?count)`
    } else {
      select += `?${elName} `
      if (selectLabels && elName !== 'property') select += `?${elName}Label `
    }
    // If the property isn't set, specify that we want only direct/truthy claims
    // and not every statements and qualifiers
    if (elName === 'property') {
      triple += ' ?prop wikibase:directClaim ?property .'
      if (selectLabels) select += `?propLabel `
    }
  }
}

setElement('subject')
setElement('property')
setElement('object')

if (selectLabels) {
  if (lang !== 'en') {
    // include English as a fallback
    lang = `${lang},en`
  }
  triple += `
  SERVICE wikibase:label {
    bd:serviceParam wikibase:language "${lang}" .
  }`
}

const { limit } = program

var sparql = `SELECT ${select.trim()} WHERE {
  ${triple}
}`
if (limit) sparql += ` LIMIT ${limit}`

output(`${grey('Generated SPARQL:')} ${sparql}`, true, true)

sparqlQueryCommand(sparql)
