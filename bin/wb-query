#!/usr/bin/env node
const program = require('../lib/program')

program
.option('-s, --subject <subject>', 'set a subject')
.option('-p, --property <property>', 'set a property')
.option('-o, --object <object>', 'set an object')
.option('--describe <node>', 'make a DESCRIBE request')
.option('-a, --labels', 'requests results labels')
.option('-c, --count', 'return a count of matching results')
.option('-r, --raw', 'raw SPARQL results')
.option('-d, --dry', 'output the SPARQL without running the query')
// /!\ -o would conflict with --object
.option('--open', 'open the query in the Query Service GUI')
.option('-f, --format <format>', "set output format: json, xml, tsv, csv, binrdf, table. Default: 'table' when 1 value is selected, 'json' otherwise")
.option('-n, --limit <num>', 'set the request results limit')
.option('-x, --index <variable>', "return the result as an index, instead of a list, using the passed variable as key (can't be used with the 'raw' option)")
.process('query')

if (!(program.subject || program.property || program.object || program.describe)) program.helpAndExit(0)

const { grey } = require('chalk')
const generateSelectSparqlQuery = require('../lib/generate_select_sparql_query')
const generateDescribeSparqlQuery = require('../lib/generate_describe_sparql_query')
const sparqlQueryCommand = require('../lib/sparql_query_command')
const output = require('../lib/output')(program)

const { describe, format } = program
const sparql = describe ? generateDescribeSparqlQuery(describe) : generateSelectSparqlQuery(program)

output(`${grey('Generated SPARQL:')} ${sparql}`, true, true)

sparqlQueryCommand(sparql, format)
