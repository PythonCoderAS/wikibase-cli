#!/usr/bin/env node
const program = require('../lib/program')

program
.option('-r, --raw', 'get raw, non-simplified, SPARQL results')
.option('-x, --index <variable>', "return the result as an index, instead of a list, using the passed pariable as key (can't be used with the 'raw' option)")
.process('sparql')

const fs = require('fs')
const errors_ = require('../lib/errors')
const makeSparqlQuery = require('../lib/make_sparql_query')
const path = program.args[0]

if (!path) return program.help()

const extension = path.split('.').slice(-1)[0]

var sparql

// Allow to pass a JS module that exports a function
// to which is passed the remaining arguments
// and from which the SPARQL request is generated
if (extension === 'js') {
  const absoluePath = require('path').resolve(process.cwd(), path)
  const fnArgs = program.args.slice(1)
  sparql = require('../lib/execute_function')(absoluePath, fnArgs)
} else {
  sparql = fs.readFileSync(path, { encoding: 'utf-8' })
}

if (!sparql.replace('\n', ' ').match(/SELECT.*WHERE/i)) {
  const err = errors_.new("this doesn't look like SPARQL", { sparql })
  errors_.exit(err)
}

const { index } = program

if (index) {
  const variableMatch = ` ?${index} `
  const selectSection = sparql.split(/WHERE/i)[0]
  // If the variable can't be found in the SPARQL SELECT section
  // we won't be able to index the results using it
  if (!selectSection.match(variableMatch)) {
    const err = errors_.new("the index variable can't be found in the SPARQL request", { sparql, index })
    errors_.exit(err)
  }
}

makeSparqlQuery(sparql)
