#!/usr/bin/env node
const program = require('../lib/program')

program
.option('-s, --simplify', 'get simplified entities data')
.option('-k, --keep <props>', 'data to keep when simplifying claims')
.option('-p, --props <props>', 'request only certain properties (info, sitelinks, aliases, labels, descriptions, claims, datatype)')
.process('data')

const { simplify } = program
const props = program.props && program.props.replace(/,/g, '|')

const wdk = require('../lib/customized_wdk')(program)
const _ = require('lodash')
const errors_ = require('../lib/errors')

const parseId = require('../lib/tolerant_id_parser')
const logNdjson = require('../lib/log_ndjson')
const ids = program.args.map(parseId)

if (!(ids && ids.length > 0)) return program.help()

const uniqueIdRequested = ids.length === 1

ids.forEach(id => {
  if (!wdk.isEntityId(id)) throw new Error(`invalid entity id: ${id}`)
})

const lightGet = require('../lib/light_get')
const urls = wdk.customize('getManyEntities', { ids, props })

const options = require('../lib/parse_simplify_options')(program.keep)

// Fetch batches sequentially, and with some delay,
// to be kind with the Wikidata API
const getNextBatch = () => {
  const url = urls.shift()

  // If url is undefined, all the batches got fetched, we are done
  if (url == null) return

  lightGet(url)
  .then(body => {
    var entities = _.values(body.entities)
    if (simplify) {
      const options = require('../lib/parse_simplify_options')(program.keep)
      entities = entities.map(entity => wdk.simplify.entity(entity, options))
    }
    if (uniqueIdRequested) {
      console.log(JSON.stringify(entities[0]))
    } else {
      logNdjson(entities)
    }
  })
  .then(delay(getNextBatch, 500))
  .catch(errors_.exit)
}

const delay = (fn, ms) => () => setTimeout(getNextBatch, ms)

getNextBatch()
