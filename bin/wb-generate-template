#!/usr/bin/env node
const program = require('../lib/program')

program
.option('-p, --props <props>', 'request only certain properties (info, sitelinks, aliases, labels, descriptions, claims, datatype)')
.option('-r, --revision <id>', 'request a specific revision')
.option('-f, --format <format>', 'Default: json. Alternatives: js')
.process('generate-template')

const parseId = require('../lib/tolerant_id_parser')
const ids = program.args.map(parseId)
require('../lib/exit_on_missing').instance(program.instance)
const { isEntityId, getEntityRevision, getManyEntities, simplify } = require('../lib/wbk')(program)
const { pick } = require('lodash')
const parseProps = require('../lib/parse_props')
const dropNonSelectedSubprops = require('../lib/drop_non_selected_subprops')
const minimizeClaims = require('../lib/minimize_claims')
const { revision } = program
const getEntitiesByBatches = require('../lib/get_entities_by_batches')

ids.forEach(id => {
  if (!isEntityId(id)) throw new Error(`invalid entity id: ${id}`)
})

const batchMode = ids.length > 1

if (batchMode && program.format === 'js') {
  throw new Error("js format can't be used when several entities are requested")
}

const requestedPropsAndSubProps = parseProps(program.props)
const requestedProps = Object.keys(requestedPropsAndSubProps)

let urls
if (revision) {
  if (ids.length !== 1) throw new Error(`requesting a revision for several entities isn't supported: ${ids}`)
  urls = [ getEntityRevision(ids[0], revision) ]
} else {
  urls = getManyEntities({ ids, props: requestedProps })
}

const requiredKeys = [ 'id', 'type', 'datatype', 'labels', 'descriptions', 'aliases', 'claims', 'sitelinks' ]

const simplifyOptions = {
  keepIds: true,
  keepQualifiers: true,
  keepReferences: true,
  keepRichValues: true,
  keepNonTruthy: true,
  keepSnaktypes: true,
  // No need to keep the hashes as every edited claim (identified with a GUID)
  // will have it's qualifiers and references fully overriden
  keepHashes: false
}

const formatEntity = entity => {
  entity = simplify.entity(entity, simplifyOptions)
  if (revision) entity = pick(entity, [ 'id' ].concat(requestedProps))
  else entity = pick(entity, requiredKeys)
  dropNonSelectedSubprops(entity, requestedPropsAndSubProps)
  minimizeClaims(entity.claims)
  return entity
}

const onResponse = entities => {
  entities = entities.map(formatEntity)
  if (program.format === 'js') {
    console.log(require('../lib/output_js_function')(entities[0]))
  } else {
    entities.forEach(entity => {
      process.stdout.write(JSON.stringify(entity) + '\n')
    })
  }
}

getEntitiesByBatches({ urls, onResponse })
