#!/usr/bin/env node
const program = require('../lib/program')

program
.option('-a, --all', 'include all claims, not only the truthy ones')
.process('claims')

const { yellow } = require('chalk')
const parseId = require('../lib/tolerant_id_parser')()
const logClaims = require('../lib/log_claims')
const getEntities = require('../lib/get_entities')
const { getEntityLabel } = require('../lib/get_entities_labels')
const errors_ = require('../lib/errors')
require('../lib/exit_on_missing').instance(program.instance)
const { isPropertyId, simplify } = require('../lib/wbk')(program)

let [ id, ...filter ] = program.args
id = id && parseId(id)

let prop, value, pattern
if (isPropertyId(filter[0])) {
  prop = filter[0]
  value = filter[1]
} else {
  pattern = filter.join(' ')
}

const { lang } = program
const output = require('../lib/output')(program)

if (!(id && lang)) program.helpAndExit(0)

// Working around a weird behavior of commander that inverts arguments
// when an option is passed before
if (id && prop && id[0] === 'P' && prop[0] === 'Q') {
  [ id, prop ] = [ prop, id ]
}

const run = async () => {
  const entities = await getEntities({ props: 'claims', ids: [ id ] })
  const entity = entities[id]
  if (!entity) {
    errors_.exitMessage(`entity not found: ${program.instance}/entity/${id}`)
  }

  const keepNonTruthy = program.all === true
  if (isPropertyId(prop) && value != null) {
    const propClaims = entity.claims[prop]
    if (!propClaims) throw new Error(`no claims found for this property: ${prop}`)
    const ids = simplify.propertyClaims(propClaims, { keepIds: true, keepNonTruthy })
      .filter(simplifyClaim => simplifyClaim.value === value)
      .map(simplifyClaim => simplifyClaim.id)
    return output(ids)
  }

  const simplifiedClaims = simplify.claims(entity.claims, { keepNonTruthy })
  if (!prop) return logClaims({ program, simplifiedClaims, pattern, resort: true })

  value = simplifiedClaims[prop]
  if (value != null) return output(simplifiedClaims[prop])

  const label = await getEntityLabel(prop)
  console.log(yellow('no statement found'), label)
}

run()
.catch(errors_.exit)
