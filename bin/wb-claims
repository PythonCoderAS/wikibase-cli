#!/usr/bin/env node
const program = require('../lib/program')

program
.option('-a, --all', 'include all claims, not only the truthy ones')
.process('claims')

const { yellow } = require('chalk')
const parseId = require('../lib/tolerant_id_parser')
const logClaims = require('../lib/log_claims')
const commonErrors = require('../lib/common_errors')
const getLangProps = require('../lib/get_lang_props')
require('../lib/exit_on_missing').instance(program.instance)
const { isPropertyId, getEntities, simplify } = require('../lib/wbk')(program)

var [ id, ...filter ] = program.args
id = id && parseId(id)

var prop, value, pattern
if (isPropertyId(filter[0])) {
  prop = filter[0]
  value = filter[1]
} else {
  pattern = filter.join(' ')
}

const { lang } = program
const output = require('../lib/output')(program)

if (!(id && lang)) program.helpAndExit(0)

// Working around a weird behavior of commander that inverts arguments
// when an option is passed before
if (id && prop && id[0] === 'P' && prop[0] === 'Q') {
  [ id, prop ] = [ prop, id ]
}

const lightGet = require('../lib/light_get')
const errors_ = require('../lib/errors')

const url = getEntities({ props: 'claims', ids: id })

lightGet(url)
.then(body => {
  const entity = body.entities && body.entities[id]
  if (!entity) return console.error('error: ', body)
  if (entity.missing != null) return console.error('entity not found:', id)

  const keepNonTruthy = program.all === true
  if (isPropertyId(prop) && value != null) {
    const propClaims = entity.claims[prop]
    if (!propClaims) throw new Error(`no claims found for this property: ${prop}`)
    const ids = simplify.propertyClaims(propClaims, { keepIds: true, keepNonTruthy })
      .filter(simplifyClaim => simplifyClaim.value === value)
      .map(simplifyClaim => simplifyClaim.id)
    return output(ids)
  }

  const simplifiedClaims = simplify.claims(entity.claims, { keepNonTruthy })
  if (!prop) return logClaims({ program, simplifiedClaims, pattern, resort: true })

  value = simplifiedClaims[prop]
  if (value != null) return output(simplifiedClaims[prop])

  getLangProps(program)
  .then(props => {
    if (!props[prop]) return commonErrors.missingProperty(prop)
    const { label } = props[prop]
    console.log(yellow('no statement found'), label)
  })
})
.catch(errors_.exit)
