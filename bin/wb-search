#!/usr/bin/env node
const program = require('../lib/program')

program
.option('-p, --properties <properties>', 'request additional properties (separated by a comma) (implies verbose mode)')
.option('-t, --type <type>', 'customize type: i|item, p|property, l|lexeme, f|form, s|sense (Default: item)')
.option('-n, --limit <num>', 'set a custom limit (defaults to 10)')
.process('search')

// Accept several words without requiring those to be joined by quotes
const search = program.args.join(' ')

if (!(search && search.length > 0)) program.helpAndExit(0)

let { lang: language, json, verbose, properties, limit, type } = program
limit = limit || 20

if (properties) program.verbose = verbose = true

const { red, grey } = require('chalk')
const valide = require('../lib/valide')
if (!valide.lang(language)) {
  console.error(red(`invalid language: ${language}`))
  process.exit(1)
}

require('../lib/exit_on_missing').instance(program.instance)
const { searchEntities } = require('../lib/wbk')(program)
const { get } = require('../lib/request')
const parseEntityType = require('../lib/parse_entity_type')
const { padEnd } = require('lodash')

type = parseEntityType(type)

const url = searchEntities({
  search,
  language,
  // Fetch more in case we need to filter-out some results
  limit: limit + 10,
  type
})

get(url)
.then(body => {
  const { error, search } = body

  if (error) {
    console.error('API error response: ' + error.info)
    process.exit(1)
  }

  let results = search

  results = results.slice(0, limit)

  if (json) {
    console.log(JSON.stringify(results, null, 2))
    return
  }

  const ids = results.map(result => result.id)

  if (ids.length === 0) {
    console.error('no result')
    process.exit(1)
  }

  // In verbose mode, use the summary format
  // to get a summary of each entity, possibly with additional properties
  if (verbose) {
    const entityDataParser = require('../lib/entity_data_parser')
    const summaryParser = require('../lib/summary_parser')
    // Override the verbose flag so that search results aren't displayed
    // in the summary verbose format, only in the normal, short, summary format
    program.verbose = false
    entityDataParser({ ids, parser: summaryParser })
  } else {
    results
    .forEach((result, index) => {
      const { id, label, description } = result
      let text = padEnd(id, 11) + label
      if (description && description.length > 0) text += ' ' + grey(description)
      console.log(text)
    })
  }
})
