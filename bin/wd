#!/usr/bin/env node
const program = require('commander')
const pkg = require('../package.json')
const { red } = require('chalk')

const cmds = {
  summary: require('../metadata/summary'),
  label: require('../metadata/label'),
  description: require('../metadata/description'),
  claims: require('../metadata/claims'),
  data: require('../metadata/data'),
  props: require('../metadata/props'),
  id: require('../metadata/id'),
  sparql: require('../metadata/sparql'),
  query: require('../metadata/query'),
  open: require('../metadata/open'),
  coord: require('../metadata/coord'),
  'set-label': require('../metadata/set-label'),
  'add-claim': require('../metadata/add-claim'),
  'add-reference': require('../metadata/add-reference'),
  config: require('../metadata/config')
}

const cmdsList = Object.keys(cmds)

program
.version(pkg.version)
.command(`summary ${cmds.summary.args}`, cmds.summary.description)
.command(`label ${cmds.label.args}`, cmds.label.description)
.command(`description ${cmds.description.args}`, cmds.description.description)
.command(`claims ${cmds.claims.args}`, cmds.claims.description)
.command(`data ${cmds.data.args}`, cmds.data.description)
.command(`props ${cmds.props.args}`, cmds.props.description)
.command(`id ${cmds.id.args}`, cmds.id.description).alias('wikiqid')
.command(`sparql ${cmds.sparql.args}`, cmds.sparql.description)
.command(`query ${cmds.query.args}`, cmds.query.description)
.command(`open ${cmds.open.args}`, cmds.open.description)
.command(`coord ${cmds.coord.args}`, cmds.coord.description)
.command(`set-label ${cmds['set-label'].args}`, cmds['set-label'].description).alias('sl')
.command(`add-claim ${cmds['add-claim'].args}`, cmds['add-claim'].description).alias('ac')
.command(`add-reference ${cmds['add-reference'].args}`, cmds['add-reference'].description).alias('ar')
.command(`config ${cmds.config.args}`, cmds.config.description)
.parse(process.argv)

const commandName = program.args[0]

if (!cmdsList.includes(commandName)) {
  console.error(red('unknown command'))
  program.help()
  process.exit(1)
}
